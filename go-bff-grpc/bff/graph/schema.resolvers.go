package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"bff/graph/model"
	"context"
	"fmt"
	"log"
	"strconv"

	"math/rand"

	pb "bff/user"

	"google.golang.org/grpc"
)

var conn *grpc.ClientConn
var client pb.UserServiceClient

func init() {
	var err error
	conn, err = grpc.Dial("localhost:50051", grpc.WithInsecure())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	client = pb.NewUserServiceClient(conn)
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, text string) (*model.Todo, error) {
	todo := &model.Todo{
		ID:   strconv.Itoa(rand.Intn(1000)),
		Text: text,
		Done: false,
	}

	r.mu.Lock()
	r.todos = append(r.todos, todo)
	req := &pb.CreateUserRequest{Username: "Quan", Email: "minhquan@gmail.com"}
	resp, err := client.CreateUser(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("error creating user: %v", err)
	}
	fmt.Println(resp)
	for _, sub := range r.subscribers {
		sub <- todo
	}
	r.mu.Unlock()

	return todo, nil
}

// ToggleTodoStatus is the resolver for the toggleTodoStatus field.
func (r *mutationResolver) ToggleTodoStatus(ctx context.Context, id string) (*model.Todo, error) {
	r.mu.Lock()
	defer r.mu.Unlock()

	for _, todo := range r.todos {
		if todo.ID == id {
			todo.Done = !todo.Done
			return todo, nil
		}
	}
	return nil, fmt.Errorf("Todo with ID %s not found", id)
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	req := &pb.GetUserRequest{UserId: "1"}
	resp, err := client.GetUser(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("error getting user: %v", err)
	}
	fmt.Println(resp)
	return r.todos, nil
}

// TodoAdded is the resolver for the todoAdded field.
func (r *subscriptionResolver) TodoAdded(ctx context.Context) (<-chan *model.Todo, error) {
	ch := make(chan *model.Todo, 1)

	r.mu.Lock()
	r.subscribers = append(r.subscribers, ch)
	r.mu.Unlock()

	go func() {
		<-ctx.Done()
		r.mu.Lock()
		for i, sub := range r.subscribers {
			if sub == ch {
				r.subscribers = append(r.subscribers[:i], r.subscribers[i+1:]...)
				break
			}
		}
		r.mu.Unlock()
	}()

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
