// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/v1/cinema.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CinemaService_QueryAvailableSeats_FullMethodName = "/cinema.CinemaService/QueryAvailableSeats"
	CinemaService_ReserveSeat_FullMethodName         = "/cinema.CinemaService/ReserveSeat"
	CinemaService_CancelSeat_FullMethodName          = "/cinema.CinemaService/CancelSeat"
)

// CinemaServiceClient is the client API for CinemaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinemaServiceClient interface {
	QueryAvailableSeats(ctx context.Context, in *QueryAvailableSeatsRequest, opts ...grpc.CallOption) (*QueryAvailableSeatsResponse, error)
	ReserveSeat(ctx context.Context, in *ReserveSeatRequest, opts ...grpc.CallOption) (*ReserveSeatResponse, error)
	CancelSeat(ctx context.Context, in *CancelSeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cinemaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCinemaServiceClient(cc grpc.ClientConnInterface) CinemaServiceClient {
	return &cinemaServiceClient{cc}
}

func (c *cinemaServiceClient) QueryAvailableSeats(ctx context.Context, in *QueryAvailableSeatsRequest, opts ...grpc.CallOption) (*QueryAvailableSeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAvailableSeatsResponse)
	err := c.cc.Invoke(ctx, CinemaService_QueryAvailableSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) ReserveSeat(ctx context.Context, in *ReserveSeatRequest, opts ...grpc.CallOption) (*ReserveSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveSeatResponse)
	err := c.cc.Invoke(ctx, CinemaService_ReserveSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) CancelSeat(ctx context.Context, in *CancelSeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CinemaService_CancelSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaServiceServer is the server API for CinemaService service.
// All implementations must embed UnimplementedCinemaServiceServer
// for forward compatibility.
type CinemaServiceServer interface {
	QueryAvailableSeats(context.Context, *QueryAvailableSeatsRequest) (*QueryAvailableSeatsResponse, error)
	ReserveSeat(context.Context, *ReserveSeatRequest) (*ReserveSeatResponse, error)
	CancelSeat(context.Context, *CancelSeatRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCinemaServiceServer()
}

// UnimplementedCinemaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCinemaServiceServer struct{}

func (UnimplementedCinemaServiceServer) QueryAvailableSeats(context.Context, *QueryAvailableSeatsRequest) (*QueryAvailableSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableSeats not implemented")
}
func (UnimplementedCinemaServiceServer) ReserveSeat(context.Context, *ReserveSeatRequest) (*ReserveSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveSeat not implemented")
}
func (UnimplementedCinemaServiceServer) CancelSeat(context.Context, *CancelSeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSeat not implemented")
}
func (UnimplementedCinemaServiceServer) mustEmbedUnimplementedCinemaServiceServer() {}
func (UnimplementedCinemaServiceServer) testEmbeddedByValue()                       {}

// UnsafeCinemaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaServiceServer will
// result in compilation errors.
type UnsafeCinemaServiceServer interface {
	mustEmbedUnimplementedCinemaServiceServer()
}

func RegisterCinemaServiceServer(s grpc.ServiceRegistrar, srv CinemaServiceServer) {
	// If the following call pancis, it indicates UnimplementedCinemaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CinemaService_ServiceDesc, srv)
}

func _CinemaService_QueryAvailableSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAvailableSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).QueryAvailableSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaService_QueryAvailableSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).QueryAvailableSeats(ctx, req.(*QueryAvailableSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_ReserveSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).ReserveSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaService_ReserveSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).ReserveSeat(ctx, req.(*ReserveSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_CancelSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).CancelSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaService_CancelSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).CancelSeat(ctx, req.(*CancelSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CinemaService_ServiceDesc is the grpc.ServiceDesc for CinemaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CinemaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cinema.CinemaService",
	HandlerType: (*CinemaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAvailableSeats",
			Handler:    _CinemaService_QueryAvailableSeats_Handler,
		},
		{
			MethodName: "ReserveSeat",
			Handler:    _CinemaService_ReserveSeat_Handler,
		},
		{
			MethodName: "CancelSeat",
			Handler:    _CinemaService_CancelSeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/cinema.proto",
}
